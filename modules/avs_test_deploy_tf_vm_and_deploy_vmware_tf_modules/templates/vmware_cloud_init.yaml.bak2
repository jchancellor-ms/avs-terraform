#cloud-config
write_files:
- content: |
    #define the providers, configure backend state, and configure managed identity to access state
    terraform {
        required_providers {
            nsxt = {
                source = "vmware/nsxt"
            }
            vsphere = {
                source = "hashicorp/vsphere"
            }
            azurerm = {
                source  = "hashicorp/azurerm"
                version = "~>3.00"
            }
            azapi = {
                source = "azure/azapi"
            }
        }

        backend "azurerm" {
            resource_group_name  = "${vmware_state_storage_resource_group_name}"
            storage_account_name = "${vmware_state_storage_account_name}"
            container_name       = "${vmware_state_storage_account_container_name}"
            key                  = "${vmware_state_storage_account_key_name}"

            use_azuread_auth = true
            subscription_id  = "${subscription_id}"
            tenant_id        = "${tenant_id}"
        }
    }

    provider "azapi" {
    }

    provider "azuread" {
    }

    #the runcmd will be used to set environment variables to use the managed identity
    provider "azurerm" {
        features {}
    }

    module "deploy_vmware_vms_and_networks" {
        source = "${vmware_deployment.tf_template_github_source}"

        nsxt_root               = "${vmware_deployment.nsxt_root}"
        t1_gateway_display_name = "${vmware_deployment.t1_gateway_display_name}"
        dhcp_profile = {
            description      = "DHCP Profile"
            display_name     = "vm_dhcp_profile"
            server_addresses = "${vmware_deployment.dhcp_profile_server_addresses}"
        }
        vm_segment = {
            description  = "test vm segment"
            display_name = "${vmware_deployment.vm_segment_display_name}"
            subnet = {
                cidr        = "${vmware_deployment.vm_segment_cidr_prefix}"
                dhcp_ranges = ["${vmware_deployment.vm_segment_dhcp_range}"]
                dhcp_v4_config = {
                    server_address = "${vmware_deployment.dhcp_profile_server_addresses}"
                    lease_time     = 86400
                    dns_servers    = ["${vmware_deployment.avs_dns_forwarder_address}"]
                }
            }
            tag = {
                scope = "VMTest"
                tag   = "VMTesting"
            }
        }
        ovf_content_library_name = "vm_content_library"
        ovf_template_name        = "photon_4.0"
        ovf_template_description = "Simple photon vm template for testing"
        ovf_template_url         = "${vmware_deployment.ovf_template_url}"
        # These values default to the AVS defaults. Override them if needed
        vsphere_datacenter = "SDDC-Datacenter"
        vsphere_datastore  = "vsanDatastore"
        vsphere_cluster    = "Cluster-1" 
        nsx_ip           = "${vmware_creds.nsx.ip}"
        nsx_user         = "${vmware_creds.nsx.user}"
        nsx_password     = "${vmware_creds.nsx.password}"
        vsphere_ip       = "${vmware_creds.vsphere.ip}"
        vsphere_user     = "${vmware_creds.vsphere.user}"
        vsphere_password = "${vmware_creds.vsphere.password}"
        vm_name          = "${vmware_deployment.vm_name}"
    }
  path: /tmp/terraform/main.tf
runcmd:
  - [ sudo, snap, install, terraform, --classic ]
  - [ cd, /tmp/terraform ]
  - [ export, ARM_USE_MSI=true ]
  - [ export, ARM_SUBSCRIPTION_ID=${subscription_id} ]
  - [ export, ARM_TENANT_ID=${tenant_id} ]
  - [ export, ARM_CLIENT_ID=${client_id} ]
  - [ terraform, init ]
  - [ terraform, apply, -auto-approve ]